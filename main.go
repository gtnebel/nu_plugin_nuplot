package main

import (
	"context"
	"errors"
	"fmt"
	"log/slog"
	"os"
	"os/signal"
	"syscall"

	"github.com/ainvaltin/nu-plugin"

	"github.com/gtnebel/nu_plugin_nuplot/commands"
)

const PluginVersion = "0.0.1"

func quitSignalContext() context.Context {
	ctx, cancel := context.WithCancelCause(context.Background())

	go func() {
		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)
		defer signal.Stop(sigChan)
		sig := <-sigChan
		cancel(fmt.Errorf("got quit signal: %s", sig))
	}()

	return ctx
}

// // generate random data for bar chart
// func generateBarItems() []opts.BarData {
// 	items := make([]opts.BarData, 0)
// 	for range 7 {
// 		items = append(items, opts.BarData{Value: rand.Intn(300)})
// 	}
// 	return items
// }

func main() {
	slog.SetLogLoggerLevel(slog.LevelInfo)

	p, err := nu.New(
		[]*nu.Command{
			commands.NuplotLine(),
			commands.NuplotBar(),
			commands.NuplotPie(),
		},
		PluginVersion,
		nil,
	)
	if err != nil {
		slog.Error("failed to create plugin", "error", err)
		return
	}
	if err := p.Run(quitSignalContext()); err != nil && !errors.Is(err, nu.ErrGoodbye) {
		slog.Error("plugin exited with error", "error", err)
	}

	// // create a new bar instance
	// bar := charts.NewBar()
	// // set some global options like Title/Legend/ToolTip or anything else
	// bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
	// 	Title:    "My first bar chart generated by go-echarts",
	// 	Subtitle: "It's extremely easy to use, right?",
	// }))

	// // Put data into instance
	// bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
	// 	AddSeries("Category A", generateBarItems()).
	// 	AddSeries("Category B", generateBarItems())
	// // Where the magic happens
	// f, _ := os.Create("bar.html")
	// bar.Render(f)
}
